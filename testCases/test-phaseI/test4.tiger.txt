

[ RUN ] parsing code... 

let type id = int ; type id = id ; var id : id := intlit ; var id : id ; var id : int := intlit ; var id : float := floatlit ; in id := id + id ; id := id + id ; Error: left and right type between assignment is mismatched!

end  

----------------------------------------
Table: Variables
Name: $t0
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Variables
Name: $t1
----------------------------------------
Scope: 0
Type: float
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Variables
Name: A
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Variables
Name: B
----------------------------------------
Scope: 0
Type: float
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Variables
Name: X
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Variables
Name: Y
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Types
Name: First_Int
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Types
Name: Second_Int
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Types
Name: float
----------------------------------------
Scope: 0
Type: float
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Types
Name: int
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Functions
Name: exit
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: [i]
Parameter types: [int]
Parameter dimensions: [0]
Return type: -


----------------------------------------
Table: Functions
Name: flush
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: []
Parameter types: []
Parameter dimensions: []
Return type: -


----------------------------------------
Table: Functions
Name: not
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: [i]
Parameter types: [int]
Parameter dimensions: [0]
Return type: int


----------------------------------------
Table: Functions
Name: printi
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: [i]
Parameter types: [int]
Parameter dimensions: [0]
Return type: -
----------------------------------------



[ OK ] successful parse...


----------------------------------------
Generate IR CODE ...
----------------------------------------
    assign, X, 0,
    assign, Y, 0,
    assign, A, 0,
    assign, B, 0.1,
main:
    add, X, Y, $t0
    assgin, Y, $t0,
    add, B, A, $t1
    assgin, A, $t1,
    return, , ,
----------------------------------------

