

[ RUN ] parsing code...

let var id : int ; function id ( id : int , id : int ) : int begin id ( id ) ; id ( id ) ; return intlit ; end ; in id := id ( intlit , intlit ) ; end

----------------------------------------
Table: Variables
Name: x
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Types
Name: float
----------------------------------------
Scope: 0
Type: float
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Types
Name: int
----------------------------------------
Scope: 0
Type: int
Dimension: 0
Parameters: -
Parameter types: -
Parameter dimensions: -
Return type: -


----------------------------------------
Table: Functions
Name: exit
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: [i]
Parameter types: [int]
Parameter dimensions: [0]
Return type: -


----------------------------------------
Table: Functions
Name: flush
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: []
Parameter types: []
Parameter dimensions: []
Return type: -


----------------------------------------
Table: Functions
Name: not
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: [i]
Parameter types: [int]
Parameter dimensions: [0]
Return type: int


----------------------------------------
Table: Functions
Name: print
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: [n,m]
Parameter types: [int,int]
Parameter dimensions: [0,0]
Return type: int


----------------------------------------
Table: Functions
Name: printi
----------------------------------------
Scope: 0
Type: -
Dimension: -
Parameters: [i]
Parameter types: [int]
Parameter dimensions: [0]
Return type: -
----------------------------------------



[ OK ] successful parse...


----------------------------------------
Generate IR CODE ...
----------------------------------------
    assign, x, 0,
print:
    call, printi, n
    call, printi, m
    return, 10, ,
main:
    callr, x, print, 5, 6
    return, , ,
----------------------------------------
